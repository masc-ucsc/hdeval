description: '`AES32DSI`, which is intended for use in the decryption process of the
  AES (Advanced Encryption Standard) cryptographic algorithm, This specific function
  involves applying the AES inverse S-box transformation to a segment of data, indicated
  by the input parameters. It takes four parameters: bs, rs2, rs1, and rd, which are
  used to select a specific byte from the input, to specify the source registers,
  and to indicate the destination register for the result. The key functions performed
  by this function are as follows: Shift Amount Calculation (shamt): Calculates a
  shift amount (shamt) by appending 0b000 to the lower three bits of bs, effectively
  multiplying bs by 8. This determines the byte position within a 32-bit word for
  the inverse S-Box lookup. S-Box Input Calculation (si): Extracts an 8-bit value
  from rs2 by first shifting the 32-bit value from rs2 right by shamt, then taking
  the lowest 8 bits. This value (si) is the input for the inverse S-Box lookup. Inverse
  S-Box Lookup and Extension (so): Performs an inverse S-Box lookup on si to obtain
  the transformed byte, which is then zero-extended to a 32-bit value (so). Combination
  with rs1 and Rotation: XORs the 32-bit value from rs1 with the rotated (rol32) version
  of so, using shamt (converted to an unsigned integer) as the rotation amount. This
  function combines the AES inverse S-Box transformation result with another input
  (rs1) and rotates it to align with the original position of the S-Box input byte.
  The result will store in rd. the AES forward S-box transformation, It takes an 8-bit
  input and theoretically returns an 8-bit transformed output. Currently, it simply
  returns a fixed value (0xFF) and does not perform any actual transformation.'
interface: module AES32DSI( input [31:0] rs1, input [31:0] rs2, input [4:0] bs, output
  reg [31:0] rd);
