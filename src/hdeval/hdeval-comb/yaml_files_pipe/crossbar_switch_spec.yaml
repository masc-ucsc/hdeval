description: 'The provided code defines a module named `crossbar_switch` that acts
  as a configurable crossbar switch for routing data between multiple inputs and outputs
  in a vector coprocessor or similar digital system. It is parameterized by `WIDTH`
  (the bit width of each data path), `NUM_INPUTS` (the number of input channels),
  and `NUM_OUTPUTS` (the number of output channels). The module interfaces include:
  - `recv_msg_flat`: A flattened input vector that contains all input data concatenated
  together. - `src_idx` and `dst_idx`: 5-bit inputs specifying the source and destination
  indices for routing. - `recv_val`: A signal indicating the validity of the input
  data and indices. - `recv_rdy`: A signal indicating that the crossbar is ready to
  receive data. - `send_msg_flat`: A flattened output vector that represents the data
  transferred to the specified output channel. - `send_val` and `send_rdy`: Output
  signals indicating the validity of the output data and readiness of the next unit
  to receive data, respectively. The module performs the following operations: 1.
  **Unpacking the Received Message**: It unpacks the flattened `recv_msg_flat` input
  vector into individual `recv_msg` wires, each corresponding to one of the input
  channels. 2. **Routing**: Based on the `src_idx` and `dst_idx`, it routes the data
  from the specified input channel to the specified output channel, given that `recv_val`
  and `recv_rdy` are asserted and the indices are within valid ranges. 3. **Sending
  the Message**: It packs the routed data back into a flattened `send_msg_flat` output
  vector, with the routed data positioned according to the `dst_idx`. 4. **Signal
  Control**: It manages `send_val` and `send_rdy` signals to reflect the validity
  and readiness of the data being sent. This module is designed for combinational
  logic operation without internal state (i.e., everything is done within a single
  clock cycle without latches or flip-flops for state holding), ensuring fast and
  efficient data routing between the functional units of a vector coprocessor or similar
  systems. The parameters allow for flexibility in adapting the crossbar''s size to
  fit the needs of different system configurations.'
interface: >-
  module crossbar_switch (
      input wire [WIDTH-1:0] recv_msg[NUM_INPUTS-1:0],
      input wire [4:0] src_idx,
      input wire [4:0] dst_idx,
      input wire recv_val,
      input wire recv_rdy,
      output wire [WIDTH-1:0] send_msg[NUM_OUTPUTS-1:0],
      output wire send_val,
      output wire send_rdy
  );
