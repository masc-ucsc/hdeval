description: Design module named `alu_simple` that performs various arithmetic and
  logic operations based on the inputs and a 4-bit opcode. The module takes two 8-bit
  inputs, `A` and `B`, and a 4-bit opcode, then produces an 8-bit output `Y`. The
  operations include addition, subtraction, bitwise AND, OR, XOR, shift left by 4
  positions (applied only to `B`), shift `A` left by 1, shift `A` right by 1, rotate
  `A` left (with MSB wrapping around), rotate `A` right (with LSB wrapping around),
  decrement `A` by 1, invert all bits of `A`, and a default case that sets `Y` to
  0. The ALU supports basic arithmetic operations like add and subtract, bitwise operations
  including AND, OR, XOR, logical and arithmetic shifts, rotates, decrement, and bit
  inversion, allowing it to execute a wide range of instructions for arithmetic and
  logic processing in an 8-bit accumulator-based architecture. The module interface
  is defined as `module alu(input wire [7:0] A, input wire [7:0] B, input wire [3:0]
  opcode, output reg [7:0] Y);`, where the opcode determines the operation to be performed.
interface: module alu_simple (input wire [7:0] A, input wire [7:0] B, input wire [3:0]
  opcode, output reg [7:0] Y);
