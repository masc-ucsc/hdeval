description: The module named comparison_unit is designed to perform various comparison
  operations on two inputs, in1 and in2, based on a 4-bit control signal. This module
  is parameterized with a default WIDTH of 32 bits for the inputs, allowing for flexibility
  in operand size. The module outputs a single bit, predicate, which represents the
  result of the comparison dictated by the control signal. The comparisons include
  checking if in1 is equal to zero, not equal to zero, a constant true condition,
  signed and unsigned comparisons between in1 and in2 (greater than or equal, less
  than, equal, not equal), utilizing the $signed system function for signed comparisons
  when appropriate. The control signal's specific values dictate the performed comparison,
  with the default case resulting in a predicate value of 0. This module abstracts
  the comparison logic required for predicate register instructions within a vector
  processing unit, allowing for conditional execution based on the results of these
  comparisons. The module is purely combinational, with the predicate output directly
  determined by the current inputs and control signal, ensuring immediate response
  to input changes without inferring any storage elements or latches.
interface: module comparison_unit(input logic [WIDTH-1:0] in1, input logic [WIDTH-1:0]
  in2, input logic [3:0] control, output logic predicate);
