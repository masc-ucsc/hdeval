import os
import subprocess
import sys
import logging
import hdeval  # Import the hdeval package

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class HDEvalInterface:
    def __init__(self):
        """
        Initialize the HDEvalInterface.
        """
        # Get the path to the hdeval package
        self.hdeval_repo_path = os.path.dirname(hdeval.__file__)
        logger.info(f"Initialized HDEvalInterface with hdeval_repo_path: {self.hdeval_repo_path}")

    def hdeval_open(self, benchmark_name):
        """
        Open and process the specified benchmark.

        :param benchmark_name: Name of the benchmark to process (e.g., '24a').
        :return: List of YAML file paths generated by yaml2yamls.py.
        """
        logger.info(f"hdeval_open called with benchmark_name: {benchmark_name}")
        hdeval_comb_dir = os.path.join(self.hdeval_repo_path, 'hdeval-comb')
        yaml_file_path = os.path.join(hdeval_comb_dir, f'{benchmark_name}.yaml')

        if not os.path.exists(yaml_file_path):
            logger.info(f"YAML file {yaml_file_path} not found. Attempting to run the decrypt script.")

            # Path to the decrypt script
            decrypt_script_path = os.path.join(self.hdeval_repo_path, 'decrypt')
            #logger.debug(f"Looking for decrypt script at: {decrypt_script_path}")

            # Ensure the decrypt script exists
            if not os.path.exists(decrypt_script_path):
                logger.error(f"Error: Decrypt script not found at {decrypt_script_path}.")
                sys.exit(1)

            # Make sure the decrypt script is executable
            os.chmod(decrypt_script_path, 0o755)

            # Command to run the decrypt script
            decrypt_command = [decrypt_script_path, f'hdeval-comb/{benchmark_name}']

            #logger.info(f"Running decrypt script with command: {' '.join(decrypt_command)}")

            # Run the decrypt script
            try:
                subprocess.run(
                    decrypt_command,
                    cwd=self.hdeval_repo_path,
                    check=True
                )
            except subprocess.CalledProcessError as e:
                logger.error(f"Error running decrypt script: {e}")
                sys.exit(1)

            # Check if the YAML file exists after decryption
            if not os.path.exists(yaml_file_path):
                logger.error(f"Error: YAML file {yaml_file_path} still not found after decryption.")
                sys.exit(1)

            # Path to the yaml2yamls.py script
            #yaml2yamls_script_path = os.path.join(self.hdeval_repo_path, 'hdeval', 'yaml2yamls.py')
            yaml2yamls_script_path = os.path.join(self.hdeval_repo_path, 'yaml2yamls.py')
            logger.debug(f"Looking for yaml2yamls.py at: {yaml2yamls_script_path}")

            # Ensure the yaml2yamls.py script exists
            if not os.path.exists(yaml2yamls_script_path):
                logger.error(f"Error: yaml2yamls.py script not found at {yaml2yamls_script_path}.")
                sys.exit(1)

            # Command to run the yaml2yamls.py script
            yaml2yamls_command = [sys.executable, yaml2yamls_script_path, f'hdeval-comb/{benchmark_name}.yaml']

            logger.info(f"Running yaml2yamls.py with command: {' '.join(yaml2yamls_command)}")

            # Run the yaml2yamls.py script
            try:
                subprocess.run(
                    yaml2yamls_command,
                    cwd=self.hdeval_repo_path,
                    check=True
                )
            except subprocess.CalledProcessError as e:
                logger.error(f"Error running yaml2yamls.py script: {e}")
                sys.exit(1)

            logger.info(f"Successfully decrypted and processed {benchmark_name}.yaml")

        # After processing, list all YAML files in yaml_files_pipe
        yaml_files_pipe_dir = os.path.join(hdeval_comb_dir, 'yaml_files_pipe')
        logger.debug(f"Looking for generated YAML files in: {yaml_files_pipe_dir}")

        if not os.path.exists(yaml_files_pipe_dir):
            logger.error(f"Error: YAML files pipe directory '{yaml_files_pipe_dir}' does not exist.")
            sys.exit(1)

        # List all YAML files in the pipe directory
        yaml_files = [
            os.path.join(yaml_files_pipe_dir, f)
            for f in os.listdir(yaml_files_pipe_dir)
            if f.endswith('.yaml')
        ]

        if not yaml_files:
            logger.error(f"No YAML files found in '{yaml_files_pipe_dir}'.")
            sys.exit(1)

        logger.info(f"Found {len(yaml_files)} YAML files in '{yaml_files_pipe_dir}'.")
        return yaml_files

